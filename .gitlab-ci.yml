stages:
  - build
  - test
  - documentation
  - staging
  - production

Build distribution:
  stage: build
  before_script:
    - export PATH=$PATH:/opt/anaconda3/bin/
    - conda env create -f spleaf_env.yml
    - conda activate spleaf
  script:
    - python setup.py sdist
  after_script:
    - conda deactivate
    - conda env remove -n spleaf
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 1 day

Run test:
  stage: test
  before_script:
    - export PATH=$PATH:/opt/anaconda3/bin/
    - conda env create -f spleaf_env.yml
    - conda activate spleaf
  script:
    - pip install dist/*.tar.gz
    - cd test
    - python -m pytest
  after_script:
    - conda deactivate
    - conda env remove -n spleaf

Generate documentation:
  stage: documentation
  before_script:
    - export PATH=$PATH:/opt/anaconda3/bin/
    - conda env create -f spleaf_env.yml
    - conda activate spleaf
  script:
    - pip install dist/*.tar.gz
    - cd doc
    - make html
  after_script:
    - conda deactivate
    - conda env remove -n spleaf
  artifacts:
    paths:
      - doc/build/html
    expire_in: 1 day

Deploy on Staging:
  stage: staging
  script:
    - cp dist/*.tar.gz /www/people/delisle/public/staging/spleaf
    - rm -rf /www/people/delisle/public/staging/spleaf/doc/*
    - cp -R doc/build/html/* /www/people/delisle/public/staging/spleaf/doc

Release and deploy on Production:
  stage: production
  before_script:
    # According to documentation, gitlab uses detached HEAD and we need to go back to master to release.
    # See https://gitlab.com/gitlab-org/gitlab-ce/issues/19421
    - git checkout -B master origin/master
    - git config --global user.name 'Gitlab CI'
    - git config --global user.email ''
    - git remote set-url origin "https://gitlab-ci-token:$RELEASE_TOKEN@gitlab.unige.ch/jean-baptiste.delisle/spleaf.git"
  script:
    # Tag
    - VERSION=`grep __version__ spleaf/__info__.py | sed 's/.*version__ = "//' | sed 's/"//'`
    - TAG_VERSION="v$VERSION"
    - git tag -a "$TAG_VERSION" -m "Release spleaf $TAG_VERSION"
    - git push origin "$TAG_VERSION" --quiet
    - CHANGES=`cat CHANGES.txt`
    # Add release on gitlab (via gitlab API)
    - curl -X POST -H "PRIVATE-TOKEN:$RELEASE_TOKEN" -F "name=Release spleaf $TAG_VERSION" -F "tag_name=$TAG_VERSION" -F "ref=$TAG_VERSION" -F "description=Changes:$CHANGES" 'https://gitlab.unige.ch/api/v4/projects/1383/releases'
    # Deploy on production
    - cp dist/*.tar.gz /www/people/delisle/public/spleaf
    - rm -rf /www/people/delisle/public/spleaf/doc/*
    - cp -R doc/build/html/* /www/people/delisle/public/spleaf/doc
    # Upgrade to next version
    - MAJOR_DIGIT=`echo $VERSION | awk -F. '{print $1}'`
    - MINOR_DIGIT=`echo $VERSION | awk -F. '{print $2}'`
    - PATCH_DIGIT=`echo $VERSION | awk -F. '{print $3}'`
    - PATCH_DIGIT=$((PATCH_DIGIT + 1))
    - NEW_VERSION="$MAJOR_DIGIT.$MINOR_DIGIT.$PATCH_DIGIT"
    - echo $NEW_VERSION
    # Need to hack sed to work on both mac and unix. See details here : https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    - sed -i.bak s"/version__ = \"$VERSION\"/version__ = \"$NEW_VERSION\"/g" spleaf/__info__.py
    - git add spleaf/__info__.py
    - git commit -m "Upgrade project to next version $NEW_VERSION"
    - git push origin master --quiet
  when: manual
